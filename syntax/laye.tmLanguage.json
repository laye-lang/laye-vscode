{
	"name": "Laye",
	"patterns": [
		{
			"include": "#punctuation"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#operator"
		},
		{
			"include": "#number"
		},
		{
			"include": "#string"
		},
		{
			"include": "#namespace"
		},
		{
			"include": "#type"
		},
		{
			"include": "#function"
		},
		{
			"include": "#variable.readonly"
		},
		{
			"include": "#variable"
		}
	],
	"repository": {
		"punctuation": {
			"name": "punctuation.laye",
			"match": "::|[(),.:;\\[\\]{}]|(?<=[0-9A-Z_a-z]\\s*)<(?=[\\s,0-9A-Z_a-z]*>)|(?<=[0-9A-Z_a-z]\\s*<[\\s,0-9A-Z_a-z]*)>"
		},
		"comment": {
			"patterns": [
				{
					"name": "comment.laye",
					"begin": "/\\*",
					"end": "\\*/",
					"patterns": [
						{
							"begin": "/\\*",
							"end": "\\*/"
						},
						{
							"match": "\\\\`"
						},
						{
							"name": "meta.embedded.laye",
							"begin": "`",
							"end": "`",
							"patterns": [
								{
									"include": "$self"
								}
							]
						},
						{
							"name": "keyword.laye",
							"match": "@(?:author|deprecated|param|return|see|since)\\b"
						},
						{
							"name": "variable.other.constant.laye",
							"match": "(?<=@author\\s+)[\\-.0-9A-Z_a-z]+\\b"
						},
						{
							"name": "variable.parameter.laye",
							"match": "(?<=@param\\s+[0-9A-Z_a-z]+\\s*(?:<[\\s,0-9A-Z_a-z]*>\\s*)?)[0-9A-Z_a-z]+\\b"
						},
						{
							"name": "entity.name.type.laye",
							"match": "(?<=@(?:param|return)\\s+(?:[0-9A-Z_a-z]+\\s*<(?:[\\s,0-9A-Z_a-z]+,)?\\s*)?)[0-9A-Z_a-z]+\\b"
						},
						{
							"name": "constant.numeric.laye",
							"match": "(?<=@since\\s+)[\\-.0-9A-Z_a-z]+\\b"
						}
					]
				},
				{
					"name": "comment.laye",
					"match": "//.*"
				},
				{
					"name": "comment.laye",
					"match": "#!.*"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"name": "keyword.laye",
					"match": "\\b(?:__laye_ffi_(bool|char|double|float|int|long|longdouble|longlong|short)|(strict\\s+)?alias|alignof|and|as|(static\\s+)?assert|break|cast|catch|callconv|case|const|continue|countof|default|defer|delegate|delete|discard|discardable|do|else|enum|export|fallthrough|for|foreign|from|goto|(static\\s+)?if|import|inline|is|module|mut|new|not|offsetof|operator|or|pragma|pure|rankof|ref|register|return|sizeof|struct|switch|template|test|try|typeof|unreachable|varargs|variant|while|xor|xyzzy|yield)\\b"
				},
				{
					"name": "constant.language.laye",
					"match": "\\b(?:false|global|nil|true)\\b"
				},
				{
					"name": "storage.type.laye",
					"match": "\\b(?:bool\\d*|int\\d*|float(16|32|64|80|128)|noreturn|var|void)\\b"
				}
			]
		},
		"operator": {
			"name": "keyword.operator.laye",
			"match": "\\?|=>|(?:<<|>>|[!%&*+\\-/<=>|~])=?"
		},
		"number": {
			"patterns": [
				{
					"name": "keyword.laye",
					"match": "\\b(?:[2-9]|[12][0-9]|3[0-6])#"
				},
				{
					"name": "constant.numeric.laye",
					"match": "(?<=\\b.#)(?:(?<=2#)[01]+(?:_[01]+)*(?:\\.[01]+)?|(?<=3#)[0-2]+(?:_[0-2]+)*(?:\\.[0-2]+)?|(?<=4#)[0-3]+(?:_[0-3]+)*(?:\\.[0-3]+)?|(?<=5#)[0-4]+(?:_[0-4]+)*(?:\\.[0-4]+)?|(?<=6#)[0-5]+(?:_[0-5]+)*(?:\\.[0-5]+)?|(?<=7#)[0-6]+(?:_[0-6]+)*(?:\\.[0-6]+)?|(?<=8#)[0-7]+(?:_[0-7]+)*(?:\\.[0-7]+)?|(?<=9#)[0-8]+(?:_[0-8]+)*(?:\\.[0-8]+)?)\\b|(?<=\\b..#)(?:(?<=1.#)(?:(?<=0#)[0-9]+(?:_[0-9]+)*(?:\\.[0-9]+)?|(?<=1#)[0-9Aa]+(?:_[0-9Aa]+)*(?:\\.[0-9Aa]+)?|(?<=2#)[0-9ABab]+(?:_[0-9ABab]+)*(?:\\.[0-9ABab]+)?|(?<=3#)[0-9A-Ca-c]+(?:_[0-9A-Ca-c]+)*(?:\\.[0-9A-Ca-c]+)?|(?<=4#)[0-9A-Da-d]+(?:_[0-9A-Da-d]+)*(?:\\.[0-9A-Da-d]+)?|(?<=5#)[0-9A-Ea-e]+(?:_[0-9A-Ea-e]+)*(?:\\.[0-9A-Ea-e]+)?|(?<=6#)[0-9A-Fa-f]+(?:_[0-9A-Fa-f]+)*(?:\\.[0-9A-Fa-f]+)?|(?<=7#)[0-9A-Ga-g]+(?:_[0-9A-Ga-g]+)*(?:\\.[0-9A-Ga-g]+)?|(?<=8#)[0-9A-Ha-h]+(?:_[0-9A-Ha-h]+)*(?:\\.[0-9A-Ha-h]+)?|(?<=9#)[0-9A-Ia-i]+(?:_[0-9A-Ia-i]+)*(?:\\.[0-9A-Ia-i]+)?)|(?<=2.#)(?:(?<=0#)[0-9A-Ja-j]+(?:_[0-9A-Ja-j]+)*(?:\\.[0-9A-Ja-j]+)?|(?<=1#)[0-9A-Ka-k]+(?:_[0-9A-Ka-k]+)*(?:\\.[0-9A-Ka-k]+)?|(?<=2#)[0-9A-La-l]+(?:_[0-9A-La-l]+)*(?:\\.[0-9A-La-l]+)?|(?<=3#)[0-9A-Ma-m]+(?:_[0-9A-Ma-m]+)*(?:\\.[0-9A-Ma-m]+)?|(?<=4#)[0-9A-Na-n]+(?:_[0-9A-Na-n]+)*(?:\\.[0-9A-Na-n]+)?|(?<=5#)[0-9A-Oa-o]+(?:_[0-9A-Oa-o]+)*(?:\\.[0-9A-Oa-o]+)?|(?<=6#)[0-9A-Pa-p]+(?:_[0-9A-Pa-p]+)*(?:\\.[0-9A-Pa-p]+)?|(?<=7#)[0-9A-Qa-q]+(?:_[0-9A-Qa-q]+)*(?:\\.[0-9A-Qa-q]+)?|(?<=8#)[0-9A-Ra-r]+(?:_[0-9A-Ra-r]+)*(?:\\.[0-9A-Ra-r]+)?|(?<=9#)[0-9A-Sa-s]+(?:_[0-9A-Sa-s]+)*(?:\\.[0-9A-Sa-s]+)?)|(?<=3.#)(?:(?<=0#)[0-9A-Ta-t]+(?:_[0-9A-Ta-t]+)*(?:\\.[0-9A-Ta-t]+)?|(?<=1#)[0-9A-Ua-u]+(?:_[0-9A-Ua-u]+)*(?:\\.[0-9A-Ua-u]+)?|(?<=2#)[0-9A-Va-v]+(?:_[0-9A-Va-v]+)*(?:\\.[0-9A-Va-v]+)?|(?<=3#)[0-9A-Wa-w]+(?:_[0-9A-Wa-w]+)*(?:\\.[0-9A-Wa-w]+)?|(?<=4#)[0-9A-Xa-x]+(?:_[0-9A-Xa-x]+)*(?:\\.[0-9A-Xa-x]+)?|(?<=5#)[0-9A-Ya-y]+(?:_[0-9A-Ya-y]+)*(?:\\.[0-9A-Ya-y]+)?|(?<=6#)[0-9A-Za-z]+(?:_[0-9A-Za-z]+)*(?:\\.[0-9A-Za-z]+)?))\\b(?![._])"
				},
				{
					"name": "constant.numeric.laye",
					"match": "(?<![._])\\b\\d+(?:_\\d+)*(?:\\.\\d+)?\\b(?![#._])"
				},
				{
					"name": "invalid.laye",
					"match": "[0-9]*#|\\b(?:(?:\\d+#)[.0-9A-Z_a-z]+|[.0-9_]+)\\b"
				}
			]
		},
		"escape": {
			"name": "constant.character.escape.laye",
			"match": "\\\\(?:[0abefnrtv\\\\]|x[0-7][0-9A-Fa-f]|o[0-1]?[0-7]{1,2}|u[0-9A-Fa-f]{4}|U[0-9A-Fa-f]{8})"
		},
		"string": {
			"patterns": [
				{
					"name": "string.laye",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.laye",
							"match": "\\\\\""
						},
						{
							"include": "#escape"
						},
						{
							"name": "constant.other.placeholder.laye",
							"match": "%[\\+#]*\\d*(?:\\.\\d+)?(?:hh|ll|l)?[%EGXc-gopsux]"
						},
						{
							"name": "invalid.laye",
							"match": "[\\\\%]."
						}
					]
				},
				{
					"name": "string.laye",
					"begin": "'",
					"end": "'",
					"patterns": [
						{
							"name": "constant.character.escape.laye",
							"match": "\\\\'"
						},
						{
							"include": "#escape"
						},
						{
							"name": "invalid.laye",
							"match": "\\\\."
						}
					]
				}
			]
		},
		"namespace": {
			"name": "entity.name.namespace.laye",
			"match": "\\b[0-9A-Z_a-z]+(?=::)|(?<=\\bimport\\s+(?:[\\s*,0-9A-Z_a-z]+\\sfrom\\s+(?:\"[0-9A-Z_a-z]+\"\\s+as\\s+)?)?)[0-9A-Z_a-z]+\\b"
		},
		"type": {
			"name": "entity.name.type.laye",
			"match": "(?<=\\b(?:alias|const|enum|struct|variant|mut)\\s+)[0-9A-Z_a-z]+\\b|(?<![.0-9A-Z_a-z]\\s*)\\b[0-9A-Z_a-z]+\\b(?!\\s*(?:and|is|x?or)\\b)(?=(?:\\s*<[\\s,0-9A-Z_a-z]*>)?[&*?\\[\\]]*\\s*[0-9A-Z_a-z{])|(?<=<(?:[\\s,0-9A-Z_a-z]+,)?\\s*)[0-9A-Z_a-z]+(?=\\s*[,>])"
		},
		"function": {
			"name": "entity.name.function.laye",
			"match": "\\b[0-9A-Z_a-z]+(?=\\s*\\()"
		},
		"variable.readonly": {
			"name": "variable.other.constant.laye",
			"match": "(?<=\\bconst\\s+[\\s,0-9A-Z_a-z<>]+\\s+)[0-9A-Z_a-z]+\\b|\\b[0-9_]*[A-Z][0-9A-Z_a-z]*\\b"
		},
		"variable": {
			"name": "variable.laye",
			"match": "\\b[0-9A-Z_a-z]+\\b"
		}
	},
	"scopeName": "source.laye"
}