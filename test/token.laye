import std;

export alias file_id = int;

export struct location
{
    file_id file_id;
    int offset;
    int length;
}

export struct token
{
    location location;

    variant ident { std::string_view spelling; }
    variant keyword
    {
        kind kind;
        enum kind
        {
            True, False, Nil, Global,
            If, Else, For, Do, Switch, Case, Default,
            Return, Break, Continue, Defer, Goto,
            // etc.
        }
    }

    variant string_literal { std::string_view value; }
    variant int_literal { int value; }
    variant real_literal { f64 value; }

    variant delim { u27 kind; }
}

test "token operations"
{
    var test_location = location { 1, 0, 0 };

    var ident_token = token::ident { .location = test_location, .spelling = "laye" };
    assert(ident_token == token::ident { .spelling == "laye" });

    var delim_token = token::delim { test_location, '(' };
    assert(delim_token is token::delim { .kind == '(' });

    var keyword_token = token::keyword { test_location, ::Return };
    assert(keyword_token is token::keyword { .kind == global::token::keyword::kind::Return });
}
